<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PKGLib</name>
    </assembly>
    <members>
        <member name="F:PKGLib.Archive.Files">
            <summary>
            Contains the list of files to be present in the PKG archive.
            </summary>
        </member>
        <member name="M:PKGLib.Archive.#ctor(System.String)">
            <summary>
            Generates a new instance of <see cref="T:PKGLib.Archive"/> from a file path pointing
            to a Sen no Kiseki PKG file.
            </summary>
            <param name="filePath">A path to a Sen no Kiseki PKG file on the disk.</param>
        </member>
        <member name="M:PKGLib.Archive.#ctor(System.Byte[])">
            <summary>
            Generates a new instance of <see cref="T:PKGLib.Archive"/> from an array of bytes containing
            a Sen no Kiseki PKG file.
            </summary>
            <param name="data">A byte array containing a Sen no Kiseki PKG file.</param>
        </member>
        <member name="M:PKGLib.Archive.#ctor">
            <summary>
            Creates a new empty PKG archive.
            </summary>
        </member>
        <member name="M:PKGLib.Archive.Save(System.String)">
            <summary>
            Generates a new PKG file from the current <see cref="T:PKGLib.Archive"/> and saves it
            to a specified location.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:PKGLib.Archive.GeneratePKG">
            <summary>
            Generates a PKG file from the current <see cref="T:PKGLib.Archive"/>.
            </summary>
            <returns>An array of bytes containing the newly generated PKG file.</returns>
        </member>
        <member name="M:PKGLib.Archive.GetFileSizeEstimate">
            <summary>
            Creates an estimate of the final file size of the PKG before exporting.
            </summary>
        </member>
        <member name="M:PKGLib.Archive.GetFileEntries">
            <summary>
            Generates a new set of file entries complete with offsets for each file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PKGLib.Definitions.Managed.File.FileName">
            <summary>
            Name of file (ANSI)
            </summary>
        </member>
        <member name="P:PKGLib.Definitions.Managed.File.FileSize">
            <summary>
            Size of file before compression.
            </summary>
        </member>
        <member name="P:PKGLib.Definitions.Managed.File.CompressedSize">
            <summary>
            Size of file after compression (including 12 byte header if CompressionType RLE).
            </summary>
        </member>
        <member name="P:PKGLib.Definitions.Managed.File.CompressedFlag">
            <summary>
            Specifies the type of compression used.
            </summary>
        </member>
        <member name="P:PKGLib.Definitions.Managed.File.Data">
            <summary>
            Stores the raw bytes of the file.
            The getter returns uncompresses the file automatically if it is compressed.
            To get the internally stored data (which may be compressed) use <see cref="P:PKGLib.Definitions.Managed.File.RawData"/>
            To set new data for the file use SetFileData();
            </summary>
        </member>
        <member name="M:PKGLib.Definitions.Managed.File.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new file from a file path.
            </summary>
            <param name="filePath">The path of the individual file.</param>
            <param name="compress">Set to true for the internal file to be compressed.</param>
        </member>
        <member name="M:PKGLib.Definitions.Managed.File.#ctor(System.String,System.Byte[],System.Boolean)">
            <summary>
            Creates a new file from an already existing array of bytes containing an uncompressed file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="rawData">The bytes to create the file from.</param>
            <param name="compress">Set to true for the individual file to be compressed.</param>
        </member>
        <member name="M:PKGLib.Definitions.Managed.File.#ctor(PKGLib.Definitions.Native.FileEntry@,System.Byte[])">
            <summary>
            Creates a new managed file from an existing native file struct read directly from the PKG file.
            </summary>
            <param name="entry">The file entry to base the file from.</param>
            <param name="pkgFile">The bytes of the actual PKG file that this file entry originated from.</param>
        </member>
        <member name="M:PKGLib.Definitions.Managed.File.SetFileData(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Sets new file data for this file.
            </summary>
            <param name="data">The uncompressed file data to set for this file.</param>
            <param name="compress">Set to true to compress the file.</param>
            <param name="searchBufferSize">(Default = 254)
            A value preferably between 0 and 254 that declares how many bytes
            the compressor visit before any specific byte to search for matching patterns.
            Increasing this value compresses the data to smaller filesizes at the expense of compression time.
            Changing this value has no noticeable effect on decompression time.</param>
        </member>
        <member name="M:PKGLib.Definitions.Managed.File.GetUncompressedFile">
            <summary>
            Decompresses the file present in the <see cref="P:PKGLib.Definitions.Managed.File.Data"/> 
            </summary>
            <returns></returns>
        </member>
        <member name="F:PKGLib.Definitions.Native.CompressionType.NoCompression">
            <summary>
            No compression; do not include 12 byte header.
            </summary>
        </member>
        <member name="F:PKGLib.Definitions.Native.CompressionType.CompressionRLE">
            <summary>
            Standard Sen no Kiseki/Phyre runtime encoding compression.
            </summary>
        </member>
        <member name="F:PKGLib.Definitions.Native.CompressionType.CompressionUnknown">
            <summary>
            Not supported.
            Used in the PS3 version of Sen II to store scripts and text.
            </summary>
        </member>
        <member name="M:PKGLib.Definitions.Native.FileEntry.FromFile(PKGLib.Definitions.Managed.File)">
            <summary>
            Generates a new native <see cref="T:PKGLib.Definitions.Native.FileEntry"/> from an instance of the <see cref="T:PKGLib.Definitions.Managed.File"/> class.
            </summary>
        </member>
        <member name="M:PKGLib.Utilities.StringUtilities.CharPointerToString(System.Byte*)">
            <summary>
            Converts a fixed array of null terminated ASCII chars into a string instance.
            </summary>
            <param name="fileName">Pointer to the filename to be deciphered and returned.</param>
            <returns></returns>
        </member>
        <member name="M:PKGLib.Utilities.StringUtilities.StringToCharPointer(System.String,System.Byte*)">
            <summary>
            Writes a string to a specified char pointer in ASCII format.
            </summary>
            <param name="text">The text to write to the pointer.</param>
            <param name="pointer">The pointer to write to.</param>
        </member>
        <member name="T:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities">
            <summary>
            Class which allows the manipulation of in-game memory.
            This file provides the implementation for reading/writing of memory.
            See the class for the key to the different method names.
            </summary>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ConvertToPrimitive``1(System.Byte[]@,System.Type)">
            <summary>
            Converts a passed in type into a primitive type.
            </summary>
            <typeparam name="TType">The type to return.</typeparam>
            <param name="buffer">The buffer containing the information about the specific type.</param>
            <param name="type">The type to convert to (same as type to return.</param>
            <returns>In the requested format</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ArrayToStructure``1(System.Byte[]@)">
            <summary>
            Converts a supplied array of bytes into the user passed specified generic struct or class type.
            </summary>
            <typeparam name="TStructure">A user specified class or structure to convert an array of bytes to.</typeparam>
            <param name="bytes">The array of bytes to convert into a specified structure.</param>
            <returns>The array of bytes converted to the user's own specified class or structure.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ArrayToStructure``1(System.Byte[]@,System.Int32)">
            <summary>
            Converts a supplied array of bytes into the user passed specified generic struct or class type.
            </summary>
            <typeparam name="TStructure">A user specified class or structure to convert an array of bytes to.</typeparam>
            <param name="bytes">The array of bytes to convert into a specified structure.</param>
            <param name="offset">The offset into the structure from which to obtain the structure from.</param>
            <returns>The array of bytes converted to the user's own specified class or structure.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ArrayToStructure``1(System.Byte[]@,System.Int32,System.Int32@)">
            <summary>
            Converts a supplied array of bytes into the user passed specified generic struct or class type.
            </summary>
            <typeparam name="TStructure">A user specified class or structure to convert an array of bytes to.</typeparam>
            <param name="bytes">The array of bytes to convert into a specified structure.</param>
            <param name="offset">The offset into the structure from which to obtain the structure from.</param>
            <param name="pointer">A number that becomes incremented by the size of the structure when it is read.</param>
            <returns>The array of bytes converted to the user's own specified class or structure.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ArrayToStructureUnsafe``1(System.Byte[]@)">
            <summary>
            Converts a supplied array of bytes into the user passed specified generic struct.
            </summary>
            <typeparam name="TStructure">A user specified class or structure to convert an array of bytes to.</typeparam>
            <param name="bytes">The array of bytes to convert into a specified structure.</param>
            <returns>The array of bytes converted to the user's own specified class or structure.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ArrayToStructureUnsafe``1(System.Byte[]@,System.Int32)">
            <summary>
            Converts a supplied array of bytes into the user passed specified generic struct.
            </summary>
            <typeparam name="TStructure">A user specified class or structure to convert an array of bytes to.</typeparam>
            <param name="bytes">The array of bytes to convert into a specified structure.</param>
            <param name="offset">The offset into the structure from which to obtain the structure from.</param>
            <returns>The array of bytes converted to the user's own specified class or structure.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ArrayToStructureUnsafe``1(System.Byte[]@,System.Int32,System.Int32@)">
            <summary>
            Converts a supplied array of bytes into the user passed specified generic struct.
            </summary>
            <typeparam name="TStructure">A user specified class or structure to convert an array of bytes to.</typeparam>
            <param name="bytes">The array of bytes to convert into a specified structure.</param>
            <param name="offset">The offset into the structure from which to obtain the structure from.</param>
            <param name="pointer">A number that becomes incremented by the size of the structure when it is read.</param>
            <returns>The array of bytes converted to the user's own specified class or structure.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ConvertStructureToByteArray``1(``0)">
            <summary>
            Converts a supplied user structure (or class marked [StructLayout(LayoutKind.Sequential)]) into an array of bytes for writing.
            </summary>
            <param name="structure">The structure to be converted to an array of bytes.</param>
            <returns>The user converted structure as an array of bytes.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ConvertStructureToByteArray``1(``0@)">
            <summary>
            Converts a supplied user structure (or class marked [StructLayout(LayoutKind.Sequential)]) into an array of bytes for writing.
            </summary>
            <param name="structure">The structure to be converted to an array of bytes.</param>
            <returns>The user converted structure as an array of bytes.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ConvertStructureToByteArrayUnsafe``1(``0@)">
            <summary>
            Converts a supplied user structure into an array of bytes for writing.
            </summary>
            <param name="structure">The structure to be converted to an array of bytes.</param>
            <returns>The user converted structure as an array of bytes.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.ConvertStructureToByteArrayUnsafe``1(``0)">
            <summary>
            Converts a supplied user structure into an array of bytes for writing.
            </summary>
            <param name="structure">The structure to be converted to an array of bytes.</param>
            <returns>The user converted structure as an array of bytes.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.WriteStructureToAddress``1(``0@,System.IntPtr)">
            <summary>
            Writes a supplied user structure (or class marked [StructLayout(LayoutKind.Sequential)])
            to a target location in the memory space of the same process.
            </summary>
            <param name="structure">The structure to be converted to an array of bytes.</param>
            <param name="targetAddress">The target address to write the structure contents to.</param>
            <returns>The user converted structure as an array of bytes.</returns>
        </member>
        <member name="M:PKGLib.Utilities.PACLibrary.Utilities.StructUtilities.WriteStructureToAddressUnsafe``1(``0@,System.IntPtr)">
            <summary>
            Writes a supplied user structure to a target location in the memory space of the same process.
            </summary>
            <param name="structure">The structure to be converted to an array of bytes.</param>
            <param name="targetAddress">The target address to write the structure contents to.</param>
            <returns>The user converted structure as an array of bytes.</returns>
        </member>
    </members>
</doc>
